{"version":3,"sources":["PathfindingVisualizer/Node/Node.jsx","algorithms/dijkstra.js","algorithms/astar.js","PathfindingVisualizer/PathfindingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["Node","props","state","this","col","isFinish","isStart","isWall","isVisited","onMouseDown","onMouseEnter","onMouseUp","row","extraClassName","id","className","Component","dijkstra","grid","startNode","finishNode","visited","toVisit","unvisitedNodes","node","push","getToVisit","distance","length","orderNodesByDistance","currentNode","shift","Infinity","updateNeighbours","sort","node1","node2","neighboursList","filter","neighbour","getNeighbours","forEach","alt","previousNode","backtrackNodes","path","unshift","astar","f","orderNodesByF","h","current","finish","x","y","Math","sqrt","heuristic","START_NODE_ROW","START_NODE_COL","FINISH_NODE_ROW","FINISH_NODE_COL","PathfindingVisualizer","mouseIsPressed","startSelected","finishSelected","start","getInitialGrid","setState","newGrid","slice","newNode","getNewGridStartToggled","getNewGridFinishToggled","getNewGridWallToggled","visitedNodesInOrder","shortestPath","i","setTimeout","animateShortestPath","document","getElementById","refresh","animateDijkstra","nodeRow","console","log","Container","Row","Col","ButtonGroup","aria-label","Button","onClick","visualiseDijkstra","visualiseAstar","variant","clear","map","rowIdx","key","nodeIdx","handleMouseUp","handleMouseDown","handleMouseEnter","currentRow","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.5031070a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\n\r\nimport \"./Node.css\";\r\n\r\nexport default class Node extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {};\r\n  }\r\n\r\n  render() {\r\n    const {\r\n      col,\r\n      isFinish,\r\n      isStart,\r\n      isWall,\r\n      isVisited,\r\n      onMouseDown,\r\n      onMouseEnter,\r\n      onMouseUp,\r\n      row,\r\n    } = this.props;\r\n    const extraClassName = isFinish\r\n      ? \"node-finish\"\r\n      : isStart\r\n      ? \"node-start\"\r\n      : isVisited\r\n      ? \"node-visited\"\r\n      : isWall\r\n      ? \"node-wall\"\r\n      : \"\";\r\n\r\n    return (\r\n      <div\r\n        id={`node-${row}-${col}`}\r\n        className={`node ${extraClassName}`}\r\n        onMouseDown={() => onMouseDown(row, col)}\r\n        onMouseEnter={() => onMouseEnter(row, col)}\r\n        onMouseUp={() => onMouseUp(row, col)}\r\n      ></div>\r\n    );\r\n  }\r\n}\r\n","/*\r\nperforms dijkstras algorithm\r\nRetruns: visited nodes in order.\r\n**/\r\n\r\nexport function dijkstra(grid, startNode, finishNode) {\r\n  if (!startNode | !finishNode | (startNode === finishNode)) {\r\n    return false;\r\n  }\r\n  const visited = [];\r\n  const toVisit = getToVisit(grid); // in order of distance\r\n\r\n  startNode.distance = 0;\r\n\r\n  while (!!toVisit.length) {\r\n    orderNodesByDistance(toVisit);\r\n    const currentNode = toVisit.shift();\r\n    // if the node is a wall we ignore it\r\n    if (currentNode.isWall === true) continue;\r\n    // if the current node has distance of infinity it means we cannot continue\r\n    if (currentNode.distance === Infinity) return visited;\r\n    currentNode.visited = true;\r\n    updateNeighbours(currentNode, grid);\r\n\r\n    visited.push(currentNode); // adds current node to visited\r\n\r\n    if (currentNode === finishNode) {\r\n      return visited;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getToVisit(grid) {\r\n  const unvisitedNodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      unvisitedNodes.push(node);\r\n    }\r\n  }\r\n  return unvisitedNodes;\r\n}\r\n\r\nfunction orderNodesByDistance(toVisit) {\r\n  toVisit.sort((node1, node2) => node1.distance - node2.distance);\r\n}\r\n\r\nfunction getNeighbours(node, grid) {\r\n  const neighboursList = [];\r\n  const { col, row } = node;\r\n\r\n  if (col > 0) {\r\n    neighboursList.push(grid[row][col - 1]);\r\n  }\r\n  if (col < grid[0].length - 1) {\r\n    neighboursList.push(grid[row][col + 1]);\r\n  }\r\n  if (row > 0) {\r\n    neighboursList.push(grid[row - 1][col]);\r\n  }\r\n  if (row < grid.length - 1) {\r\n    neighboursList.push(grid[row + 1][col]);\r\n  }\r\n\r\n  return neighboursList.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nfunction updateNeighbours(node, grid) {\r\n  const neighboursList = getNeighbours(node, grid);\r\n  neighboursList.forEach((neighbour) => {\r\n    const alt = node.distance + 1;\r\n    if (alt < neighbour.distance) {\r\n      neighbour.distance = alt;\r\n      neighbour.previousNode = node;\r\n    }\r\n  });\r\n}\r\n\r\nexport function backtrackNodes(finishNode) {\r\n  const path = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode != null) {\r\n    path.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return path;\r\n}\r\n","export function astar(grid, startNode, finishNode) {\r\n  if (!startNode | !finishNode | (startNode === finishNode)) {\r\n    return false;\r\n  }\r\n  const visited = [];\r\n  const toVisit = getToVisit(grid);\r\n\r\n  startNode.distance = 0;\r\n  startNode.f = 0;\r\n\r\n  while (!!toVisit.length) {\r\n    orderNodesByF(toVisit);\r\n    const currentNode = toVisit.shift();\r\n    // if the node is a wall we ignore it\r\n    if (currentNode.isWall === true) continue;\r\n    // if the current node has distance of infinity it means we cannot continue\r\n    if (currentNode.distance === Infinity) return visited;\r\n    currentNode.visited = true;\r\n    updateNeighbours(currentNode, grid, finishNode);\r\n\r\n    visited.push(currentNode); // adds current node to visited\r\n\r\n    if (currentNode === finishNode) {\r\n      return visited;\r\n    }\r\n  }\r\n}\r\n\r\nfunction getToVisit(grid) {\r\n  const unvisitedNodes = [];\r\n  for (const row of grid) {\r\n    for (const node of row) {\r\n      unvisitedNodes.push(node);\r\n    }\r\n  }\r\n  return unvisitedNodes;\r\n}\r\n\r\n// heuristic function\r\n/**\r\n * @returns the distance between the current node and the finish node\r\n */\r\nfunction heuristic(current, finish) {\r\n  const x = finish.row - current.row;\r\n  const y = finish.col - current.col;\r\n  return Math.sqrt(x ** 2 + y ** 2);\r\n}\r\n\r\nfunction orderNodesByF(toVisit) {\r\n  toVisit.sort((node1, node2) => node1.f - node2.f);\r\n}\r\n\r\n//neighbours\r\n\r\nfunction getNeighbours(node, grid) {\r\n  const neighboursList = [];\r\n  const { col, row } = node;\r\n\r\n  if (col > 0) {\r\n    neighboursList.push(grid[row][col - 1]);\r\n  }\r\n  if (col < grid[0].length - 1) {\r\n    neighboursList.push(grid[row][col + 1]);\r\n  }\r\n  if (row > 0) {\r\n    neighboursList.push(grid[row - 1][col]);\r\n  }\r\n  if (row < grid.length - 1) {\r\n    neighboursList.push(grid[row + 1][col]);\r\n  }\r\n  return neighboursList.filter((neighbour) => !neighbour.isVisited);\r\n}\r\n\r\nfunction updateNeighbours(node, grid, finishNode) {\r\n  const neighboursList = getNeighbours(node, grid);\r\n  neighboursList.forEach((neighbour) => {\r\n    const h = heuristic(node, finishNode);\r\n    const alt = node.distance + 1;\r\n    const f = h + alt;\r\n    if (f < neighbour.f) {\r\n      neighbour.f = f;\r\n      neighbour.distance = alt;\r\n      neighbour.previousNode = node;\r\n    }\r\n  });\r\n}\r\n\r\nexport function backtrackNodes(finishNode) {\r\n  const path = [];\r\n  let currentNode = finishNode;\r\n  while (currentNode != null) {\r\n    path.unshift(currentNode);\r\n    currentNode = currentNode.previousNode;\r\n  }\r\n  return path;\r\n}\r\n","import React, { Component } from \"react\";\r\nimport Node from \"./Node/Node\";\r\nimport { dijkstra, backtrackNodes } from \"../algorithms/dijkstra\";\r\nimport { astar } from \"../algorithms/astar\";\r\nimport {\r\n  ButtonGroup,\r\n  ButtonToolbar,\r\n  Button,\r\n  Navbar,\r\n  Modal,\r\n  Container,\r\n  Row,\r\n  Col,\r\n} from \"react-bootstrap\";\r\n\r\nimport \"./PathfindingVisualizer.css\";\r\n\r\nvar START_NODE_ROW = 10;\r\nvar START_NODE_COL = 15;\r\nvar FINISH_NODE_ROW = 10;\r\nvar FINISH_NODE_COL = 25;\r\n\r\nexport default class PathfindingVisualizer extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      grid: [],\r\n      mouseIsPressed: false,\r\n      startSelected: false,\r\n      finishSelected: false,\r\n      start: null,\r\n      finish: null,\r\n    };\r\n  }\r\n  componentDidMount() {\r\n    const grid = getInitialGrid();\r\n    this.setState({\r\n      grid: grid,\r\n    });\r\n  }\r\n\r\n  getNewGridWallToggled(grid, row, col) {\r\n    const newGrid = grid.slice();\r\n    const node = grid[row][col];\r\n    const newNode = {\r\n      ...node,\r\n      isWall: !node.isWall,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n  }\r\n\r\n  getNewGridStartToggled(grid, row, col) {\r\n    const newGrid = grid.slice();\r\n    const node = grid[row][col];\r\n    const newNode = {\r\n      ...node,\r\n      isStart: !node.isStart,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n  }\r\n\r\n  getNewGridFinishToggled(grid, row, col) {\r\n    const newGrid = grid.slice();\r\n    const node = grid[row][col];\r\n    const newNode = {\r\n      ...node,\r\n      isFinish: !node.isFinish,\r\n    };\r\n    newGrid[row][col] = newNode;\r\n    return newGrid;\r\n  }\r\n\r\n  handleMouseDown(row, col) {\r\n    if (this.state.grid[row][col].isStart) {\r\n      const newGrid = this.getNewGridStartToggled(this.state.grid, row, col);\r\n      this.setState({\r\n        grid: newGrid,\r\n        mouseIsPressed: true,\r\n        startSelected: true,\r\n      });\r\n    } else if (this.state.grid[row][col].isFinish) {\r\n      const newGrid = this.getNewGridFinishToggled(this.state.grid, row, col);\r\n      this.setState({\r\n        grid: newGrid,\r\n        mouseIsPressed: true,\r\n        finishSelected: true,\r\n      });\r\n    } else {\r\n      const newGrid = this.getNewGridWallToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, mouseIsPressed: true });\r\n    }\r\n  }\r\n\r\n  handleMouseEnter(row, col) {\r\n    if (!this.state.mouseIsPressed) return;\r\n    if (this.state.startSelected) return;\r\n    if (this.state.finishSelected) return;\r\n    const newGrid = this.getNewGridWallToggled(this.state.grid, row, col);\r\n    this.setState({ grid: newGrid });\r\n  }\r\n\r\n  handleMouseUp(row, col) {\r\n    if (this.state.startSelected) {\r\n      const newGrid = this.getNewGridStartToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, startSelected: false });\r\n      START_NODE_ROW = row;\r\n      START_NODE_COL = col;\r\n    }\r\n    if (this.state.finishSelected) {\r\n      const newGrid = this.getNewGridFinishToggled(this.state.grid, row, col);\r\n      this.setState({ grid: newGrid, finishSelected: false });\r\n      FINISH_NODE_ROW = row;\r\n      FINISH_NODE_COL = col;\r\n    }\r\n    this.setState({\r\n      mouseIsPressed: false,\r\n    });\r\n  }\r\n\r\n  animateDijkstra(visitedNodesInOrder, shortestPath) {\r\n    for (let i = 0; i < visitedNodesInOrder.length; i++) {\r\n      if (i === visitedNodesInOrder.length - 1) {\r\n        setTimeout(() => {\r\n          this.animateShortestPath(shortestPath);\r\n        }, 10 * i);\r\n        return;\r\n      }\r\n\r\n      setTimeout(() => {\r\n        const node = visitedNodesInOrder[i];\r\n        const newGrid = this.state.grid.slice();\r\n        const newNode = {\r\n          ...node,\r\n          isVisited: true,\r\n        };\r\n        newGrid[node.row][node.col] = newNode;\r\n        if (!node.isStart && !node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-visited\";\r\n        }\r\n      }, 10 * i);\r\n    }\r\n  }\r\n\r\n  animateShortestPath(shortestPath) {\r\n    for (let i = 0; i < shortestPath.length; i++) {\r\n      setTimeout(() => {\r\n        const node = shortestPath[i];\r\n        const newGrid = this.state.grid.slice();\r\n        if (!node.isStart && !node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node node-path\";\r\n        }\r\n      }, 30 * i);\r\n    }\r\n  }\r\n\r\n  visualiseAstar() {\r\n    this.refresh();\r\n    const { grid } = this.state;\r\n    // loop grid to clear visited path etc\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = astar(grid, startNode, finishNode);\r\n    const shortestPath = backtrackNodes(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, shortestPath);\r\n  }\r\n\r\n  visualiseDijkstra() {\r\n    this.refresh();\r\n    const { grid } = this.state;\r\n    // loop grid to clear visited path etc\r\n    const startNode = grid[START_NODE_ROW][START_NODE_COL];\r\n    const finishNode = grid[FINISH_NODE_ROW][FINISH_NODE_COL];\r\n    const visitedNodesInOrder = dijkstra(grid, startNode, finishNode);\r\n    const shortestPath = backtrackNodes(finishNode);\r\n    this.animateDijkstra(visitedNodesInOrder, shortestPath);\r\n  }\r\n  refresh() {\r\n    // window.location.reload(false);\r\n    var newGrid = this.state.grid.slice();\r\n    for (const nodeRow of newGrid) {\r\n      for (const node of nodeRow) {\r\n        const newNode = {\r\n          ...node,\r\n          distance: Infinity,\r\n          isVisited: false,\r\n          previousNode: null,\r\n          f: Infinity,\r\n        };\r\n        newGrid[node.row][node.col] = newNode;\r\n        if (!node.isStart && !node.isFinish && !node.isWall) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n  clear() {\r\n    // window.location.reload(false);\r\n    var newGrid = this.state.grid.slice();\r\n    for (const nodeRow of newGrid) {\r\n      for (const node of nodeRow) {\r\n        const newNode = {\r\n          ...node,\r\n          distance: Infinity,\r\n          isVisited: false,\r\n          isWall: false,\r\n          previousNode: null,\r\n          f: Infinity,\r\n        };\r\n        newGrid[node.row][node.col] = newNode;\r\n        if (!node.isStart && !node.isFinish) {\r\n          document.getElementById(`node-${node.row}-${node.col}`).className =\r\n            \"node\";\r\n        }\r\n      }\r\n    }\r\n  }\r\n\r\n  render() {\r\n    const { grid, mouseIsPressed } = this.state;\r\n    console.log(grid);\r\n\r\n    return (\r\n      <>\r\n        <Container>\r\n          <Row>\r\n            <Col>\r\n              <ButtonGroup className=\"mr-2\" aria-label=\"First group\">\r\n                <Button onClick={() => this.visualiseDijkstra()}>\r\n                  Visualise Dijkstras Algorithm\r\n                </Button>\r\n                <Button onClick={() => this.visualiseAstar()}>\r\n                  Visualise A-star Algorithm\r\n                </Button>\r\n              </ButtonGroup>\r\n\r\n              <ButtonGroup className=\"mr-3\" aria-label=\"Second group\">\r\n                <Button variant=\"secondary\" onClick={() => this.clear()}>\r\n                  Reset\r\n                </Button>\r\n              </ButtonGroup>\r\n            </Col>\r\n          </Row>\r\n        </Container>\r\n\r\n        <div className=\"grid\">\r\n          {grid.map((row, rowIdx) => {\r\n            return (\r\n              <div key={rowIdx}>\r\n                {row.map((node, nodeIdx) => {\r\n                  const {\r\n                    row,\r\n                    col,\r\n                    isFinish,\r\n                    isStart,\r\n                    isWall,\r\n                    isVisited,\r\n                  } = node;\r\n                  return (\r\n                    <Node\r\n                      key={nodeIdx}\r\n                      col={col}\r\n                      isStart={isStart}\r\n                      isFinish={isFinish}\r\n                      isWall={isWall}\r\n                      isVisited={isVisited}\r\n                      onMouseUp={(row, col) => this.handleMouseUp(row, col)}\r\n                      onMouseDown={(row, col) => this.handleMouseDown(row, col)}\r\n                      mouseIsPressed={mouseIsPressed}\r\n                      onMouseEnter={(row, col) =>\r\n                        this.handleMouseEnter(row, col)\r\n                      }\r\n                      row={row}\r\n                    ></Node>\r\n                  );\r\n                })}\r\n              </div>\r\n            );\r\n          })}\r\n        </div>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst getInitialGrid = () => {\r\n  const grid = [];\r\n  for (let row = 0; row < 15; row++) {\r\n    const currentRow = [];\r\n    for (let col = 0; col < 40; col++) {\r\n      const currentNode = {\r\n        col,\r\n        row,\r\n        isStart: row === START_NODE_ROW && col === START_NODE_COL,\r\n        isFinish: row === FINISH_NODE_ROW && col === FINISH_NODE_COL,\r\n        distance: Infinity,\r\n        isVisited: false,\r\n        isWall: false,\r\n        previousNode: null,\r\n        f: Infinity,\r\n      };\r\n      currentRow.push(currentNode);\r\n    }\r\n    grid.push(currentRow);\r\n  }\r\n  return grid;\r\n};\r\n","import React from 'react';\nimport './App.css';\nimport PathfindingVisualizer from './PathfindingVisualizer/PathfindingVisualizer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <PathfindingVisualizer></PathfindingVisualizer>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport \"bootstrap/dist/css/bootstrap.css\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}